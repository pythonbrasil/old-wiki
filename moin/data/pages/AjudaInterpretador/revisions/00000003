Usar o interpretador Python para xeretar a linguagem é algo bem legal, mas também
é possível fazer o mesmo com um módulo que não estamos habituado a usar.
Vou deixar algumas dicas de que eu faço quando estou bisbilhotando algum módulo
que não conheço.

= O print é seu amigo =
Use e abuse, se não sabe o que é ''coisa'' então ''print coisa''.

{{{#!python
>>> x = dir
>>> print x
<built-in function dir>
}}}

x é um alias para a função dir.

= O dir é seu amigo =
O dir lista os símbolos públicos de um módulo, geralmente
contém classes, funções e variáveis para serem usadas diretamente.

{{{#!python
>>> import thread
>>> dir(thread)
['LockType', '__doc__', '__name__', 'allocate', 'allocate_lock', 'error', 'exit', 'exit_thread', 'get_ident', 'interrupt_main', 'start_new', 'start_new_thread']>>>
}}}

Tirando os símbolos que o Python criou (''__doc__'' e ''__name__''), é o que eu tenho disponível para mexer com o módulo ''thread''.

= coisa.__doc__ é seu amigo =

Para que serve mesmo o módulo thread?
{{{#!python
>>> print thread.__doc__
This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.
}}}

Ok, é pra fazer manipular threads, de uma maneira "primitiva" (baixo-nível).
Tem uma dica pra eu usar o módulo ''threading'' que é mais amigável.

O que é o símbolo ''start_new'' nesse módulo?
{{{#!python
>>> print thread.start_new
<built-in function start_new>
}}}

Uma função, que faz mesmo?
{{{#!python
>>> print thread.start_new.__doc__
start_new_thread(function, args[, kwargs])
(start_new() is an obsolete synonym)
 
Start a new thread and return its identifier.  The thread will call the
function with positional arguments from the tuple args and keyword arguments
taken from the optional dictionary kwargs.  The thread exits when the
function returns; the return value is ignored.  The thread will also exit
when the function raises an unhandled exception; a stack trace will be
printed unless the exception is SystemExit.
}}}

Hmm legal, eu sei os argumentos que a função utiliza e tenho a descrição
completa dela, tem até uma dica que essa função é obsoleta! Eu deveria
usar ''start_new_thread''.

= O help é seu amigo =

Existe uma forma bem amigável de obter ajuda no interpretador (creio eu,
que só existe depois do Python 2.0), é com o comando help. O help
exibe a saída igual a uma manpage do Unix. Contendo um resumo, descrição,
parãmetros, hierarquia de classes e várias outros comentários. Muito útil!

de volta o módulo thread...
{{{#!python
>>> help(thread)

Help on built-in module thread:
 
NAME
    thread
 
FILE
    (built-in)
 
DESCRIPTION
    This module provides primitive operations to write multi-threaded programs.
    The 'threading' module provides a more convenient interface.
 
CLASSES
    exceptions.Exception
        error
    __builtin__.object
        lock
...
}}}
