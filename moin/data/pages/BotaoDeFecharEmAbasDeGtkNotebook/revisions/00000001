= Botão de Fechar em abas de gtk.Notebook =
O ''widget'' de PyGTK '''[http://www.pygtk.org/docs/pygtk/class-gtknotebook.html gtk.Notebook]''' é bastante útil para organizar telas que venham a conter vários dados. Para fazer, digamos, telas de configuração, é bastante simples. O código abaixo, por exemplo, cria um ''stub'' de tela de configuração com duas abas.

{{{
#!python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import gtk
window = gtk.Window(gtk.WINDOW_TOPLEVEL)
# Creating notebook
notebook = gtk.Notebook()
# Creating pages
# First tab label
this_label = gtk.Label("Isso")
# First page content
this_content = gtk.Label('Configura\nIsso')
that_label = gtk.Label("Aquilo")
# First page content
that_content = gtk.Label('Configura\nAquilo')
# Add to notebook
notebook.append_page(this_content, this_label)
notebook.append_page(that_content, that_label)
# Finishing
window.add(notebook)
window.show_all()
gtk.main()
}}}
O resultado é...

attachment:tela-notebook1.png

Às vezes, porém, queremos criar abas dinâmicamente, e queremos poder fechá-las após criá-las. Uma maneira de fechar bastante elegante é adicionar um botão de fechar em cada aba. '''gtk.Notebook''' não faz isso automaticamente, mas a tarefa é simples. Vamos executá-la passo a passo aqui.

== Acrescentando botão à aba ==

No código acima, o rótulo da aba é o segundo argumento do método '''[http://www.pygtk.org/docs/pygtk/class-gtknotebook.html gtk.Notebook.append_page()]'''. Para adicionar um botão ao rótulo, poderíamos trocar o objeto '''[http://www.pygtk.org/docs/pygtk/class-gtklabel.html gtk.Label]''' por um '''[http://www.pygtk.org/docs/pygtk/class-gtkhbox.html gtk.HBox]''' que contivesse tanto o rótulo quanto o botão, como na função abaixo:

{{{
#!python
def get_tab_label(label_text):
    box = gtk.HBox()
    # Creating button
    button = gtk.Button()
    # Retrieving "close" icon
    image = gtk.image_new_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
    button.add(image)
    # Creating label
    label = gtk.Label(label_text)
    # Putting in the gtk.HBox
    box.pack_start(label)
    box.pack_start(button)
    box.show_all()
    return box
}}}
Substituímos os '''gtk.Label'''s utilizados como rótulos de abas por uma chamada de '''get_tab_label''':

{{{
#!python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import gtk
def get_tab_label(label_text):
    box = gtk.HBox()
    button = gtk.Button()
    image = gtk.image_new_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
    button.add(image)
    label = gtk.Label(label_text)
    box.pack_start(label)
    box.pack_start(button)
    box.show_all()
    return box
window = gtk.Window(gtk.WINDOW_TOPLEVEL)
notebook = gtk.Notebook()
# Note the difference:
this_label = get_tab_label("Isso")
this_content = gtk.Label('Configura\nIsso')
# Note the difference:
that_label = get_tab_label("Aquilo")
that_content = gtk.Label('Configura\nAquilo')
# Add to notebook
notebook.append_page(this_content, this_label)
notebook.append_page(that_content, that_label)
# Finishing
window.add(notebook)
window.show_all()
gtk.main()
}}}

E o resultado é

attachment:tela-notebook2.png

== A classe TabLabel ==

Nós escrevemos uma função para gerar nosso rótulo, mas vamos aperfeiçoar nosso código. Ao invés de uma função, faremos uma classe, descendente de '''gtk.HBox''', que será nosso rótulo. Chamaremos essa classe de '''TabLabel''', e sua função de inicialização é, basicamente, o mesmo que a função get_tab_label() acima. Para efeitos de teste, vamos salvá-la no arquivo '''tablabel.py'''.

{{{#!python
import gtk

class TabLabel(gtk.HBox):
    def __init__(self, label_text):
        gtk.HBox.__init__(self)
        self.button = gtk.Button()
        image = gtk.image_new_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
        self.button.add(image)
        self.label = gtk.Label(label_text)
        self.pack_start(self.label)
        self.pack_start(self.button)
        # Don't forget: you should show all
        self.show_all()
}}}

Nosso programa agora ficará assim:

{{{!python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import gtk
import tablabel

window = gtk.Window(gtk.WINDOW_TOPLEVEL)
notebook = gtk.Notebook()
this_label = tablabel.TabLabel("Isso")
this_content = gtk.Label('Configura\nIsso')
that_label = tablabel.TabLabel("Aquilo")
that_content = gtk.Label('Configura\nAquilo')
notebook.append_page(this_content, this_label)
notebook.append_page(that_content, that_label)
window.add(notebook)
window.show_all()
gtk.main()
}}}

Usarmos uma classe, e não mais só uma função, será muito útil quando formos tornar os botões funcionais.

== Removendo páginas ==

Para remover uma página de um gtk.Notebook, usamos o método '''[http://www.pygtk.org/docs/pygtk/class-gtknotebook.html#method-gtknotebook--remove-page gtk.Notebook.remove_page()]'''. Esse método espera como argumento um número inteiro que indicará que aba será removida: 0 para a primeira aba, 1, para a segunda etc., sendo que -1 remove a última, seja qual for.

Temos de usar esse método para remover as abas quando clicarmos nos botões, mas precisamos saber qual é o número da aba. Os métodos de inserção de página ('''gtk.Notebook.append_page()''', '''[http://www.pygtk.org/docs/pygtk/class-gtknotebook.html#method-gtknotebook--prepend-page prepend_page()]''', '''[http://www.pygtk.org/docs/pygtk/class-gtknotebook.html#method-gtknotebook--insert-page insert_page()]''') retornam o índice da página criada, mas esse índice pode mudar (por exemplo, se alguém fechar uma página anterior).

Uma maneira de recuperar o índice de uma página é através do método '''[http://www.pygtk.org/docs/pygtk/class-gtknotebook.html#method-gtknotebook--page-num gtk.Notebook.page_num()]'''. Esse método recebe como argumento um ''widget''. Se alguma página possuir esse ''widget'', o índice dessa aba é retornado. Desse modo, na classe '''TabLabel''', podemos criar um método para ser conectado ao evento '''clicked''' do botão da aba que, usando '''gtk.Notebook.remove_page()''', encontre a página correspondente e a remova:

{{{#!python
def on_button_clicked(self, button):
    position = self.notebook.page_num(self.widget)
    self.notebook.remove_page(position)
}}}

Note que estamos usando campos que não criamos: '''TabLabel.notebook''' e '''TabLabel.widget'''. A solução é atualizar o método '''TabLabel.__init__()''', para que receba também, como argumento, o '''gtk.Notebook''' onde a aba será usada e o ''widget'' que a página armazenará:

{{{#!python
import gtk

class TabLabel(gtk.HBox):
    def __init__(self, label_text, notebook, widget):
        gtk.HBox.__init__(self)
        # Values
        self.notebook = notebook
        self.widget = widget
        # Widgets
        self.button = gtk.Button()
        image = gtk.image_new_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
        self.button.add(image)
        self.label = gtk.Label(label_text)
        # Packing
        self.pack_start(self.label)
        self.pack_start(self.button)
        # Connecting 'on_button_clicked':
        self.button.connect('clicked', self.on_button_clicked)	
        # Don't forget: you should show all
        self.show_all()

    def on_button_clicked(self, button):
        position = self.notebook.page_num(self.widget)
        self.notebook.remove_page(position)
}}}

Agora, atualizamos o programa...

{{{#!python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import gtk
import tablabel

window = gtk.Window(gtk.WINDOW_TOPLEVEL)
notebook = gtk.Notebook()
# Precisa criar conteúdo antes
this_content = gtk.Label('Configura\nIsso')
this_label = tablabel.TabLabel("Isso", notebook, this_content)
that_content = gtk.Label('Configura\nAquilo')
that_label = tablabel.TabLabel("Aquilo", notebook, that_content)
notebook.append_page(this_content, this_label)
notebook.append_page(that_content, that_label)
window.add(notebook)
window.show_all()
gtk.main()
}}}

...e ''voila''! Nossas abas fecham. Teste executar o programa agora, e clique em um dos botões de fechar para ver as abas se fechando.

== A classe EnhancedNotebook ==

Para simplificar o trabalho de lidar com as novas abas, que tal criar uma classe herdando de '''gtk.Notebook'''? Vamos declarar, nessa classe, o método '''insert_page_with_close_button()''' análogo ao método '''gtk.Notebook.insert_page()'''.

{{{#!python
import gtk
import tablabel

class EnhancedNotebook(gtk.Notebook):
    def __init__(self):
        gtk.Notebook.__init__(self)

    def insert_page_with_close_button(self, child, tab_text, position=-1):
        # Note that we give the text in a string, not a widget
        label = tablabel.TabLabel(tab_text, self, child)
        self.insert_page(child, label, position)
}}}

Salvemos essa classe em '''enhanced.py'''. Agora, podemos ter uma nova versão do programa:

{{{#!python
import gtk
from enhanced import EnhancedNotebook

window = gtk.Window(gtk.WINDOW_TOPLEVEL)
notebook = EnhancedNotebook()
this_content = gtk.Label('Configura\nIsso')
notebook.insert_page_with_close_button(this_content, "Isso")
that_content = gtk.Label('Configura\nAquilo')
notebook.insert_page_with_close_button(that_content, "Aquilo")
window.add(notebook)
window.show_all()
}}}

Bem mais elegante, não? Podem-se fazer outros métodos, também, correspondentes aos '''gtk.Notebook.append_page()''', '''gtk.Notebook.prepend_page()''' etc.

== Melhorias estéticas ==

Nossa nova classe está funcionando a contento. Entretanto, quem quer que já tenha utilizado alguma aplicação em GTK+ com abas notará que os botões são bem feinhos. Veja, por exemplo, a diferença entre nossas abas e as abas do [http://www.gnome.org/projects/gedit/ gedit]:

attachment:diferenca-botoes.png

A primeira coisa que podemos fazer para melhorar a aparência é tirar a borda (ou ''relief'') dos botões. Para isso, basta utilizar o método '''[http://www.pygtk.org/docs/pygtk/class-gtkbutton.html#method-gtkbutton--set-relief gtk.Button.set_relief()]''' do botão da aba:

{{{!python
self.button = gtk.Button()
image = gtk.image_new_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
self.button.add(image)
self.button.set_relief(gtk.RELIEF_NONE)
}}}

Considerando o quanto a construção do botão de fechar está ficando complicada, vamos declarar um método '''tablabel.TabLabel.get_close_button()''' só para criá-lo:
