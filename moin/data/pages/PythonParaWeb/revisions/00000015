#pragma section-numbers off
= Python para Web =

'''Artigo incompleto que pode conter informações equivocadas: favor, ao encontrar um erro: edite, apague, ou envie um e-mail, etc :-) Obrigado.'''

Este artigo é uma opinião do autor que através de sua breve experiência com Python visa sanar alguma dúvidas sobre programação web utilizando-se o Python.

[[TableOfContents]]

== Webware ==

''Se ainda houver algum erro, favor notificar!''

Uma das ferramentas mais conhecidas pelos pythonicos para desenvolver aplicativos web. É simples e com nível de aprendizado baixo, tanto para pythonicos quanto para aqueles que estão migrando, seja vindo do JSP, PHP ou ASP e outros servlets.

''PS: esta sessão do Webware foi corrigido pelo Michel Thadeu. Obrigado! (tava tudo errado o que escrevi hahaha)'' :-)

=== Características ===

O webware lhe permite o desenvolvimento de servlets, tags <% %> (através de um outro modulo) e mais uma infinidade de outras opções ... mas a principal finalidade é mesmo para o desenvolvimento de servlets. ''Não tenho ainda idéia de como funciona sua arquitetura, qualquer informação seria muito bem vinda.''

Possuí ótima integração com outros módulos Python, como o Cheetah para template-engine, etc.

Pode ser um pouco doloroso trabalhar o webware com webdesigners se não tiverem muita experiência, mas existem algumas manhas para contornar isto.

==== Para Rever ====

   * Aparentemente existe uma DLL para integração com o IIS.

=== Código exemplo ===

Um simples código `hello world` servlet:

{{{
from WebKit.Servlet import Servlet 
class Hello(Servlet): 
   def respond(self, trans): 
       trans.response().write('Content-type: text/html\\n\\nHello, world!\\n') 

}}}

Agora um código PSP:

{{{
<% page extends="Modelo"%>
<% page method="writeContent"%>
<psp:method name="title">return 'The Title'</psp:method>

}}}

Criação de servlets-base através do Cheetah:

{{{
#extends Base.Base
#implements writeHTML
#attr $titulo='um título'

<h3>O título é: $titulo</h3>

<p>
#block writeBody
O conteúdo pode ser substituído substituindo-se o método writebody, num
template bastaria omitir a tag #implements.
#end block writeBody
</p>

}}}

Gerando um template +- (como diria o Michel :-P ) assim:

{{{
class Pagina(Base):
  titulo='um título'
  def writeHTML(self, **kw):
    self.write('<h3>O título é: %s</h3>' % self.titulo)
    self.writeBody(**kw)
  def writeBody(self, **kw):

}}}

=== Prós ===

   * Curva de aprendizado baixa;
   * Boa integração com módulos existentes;
   * Maduro, versão atual é 0.8.1.

=== Contras ===

   * Pode ser complicado para quem não tem experiência;
   * Aparentemente só.

=== Segurança ===

Tá aí algo para arrumar :-)

=== Mais Informações ===

Visitem a página do [http://webware.sf.net/ Webware]. Ou veja outras informações em WebwareRapidinho.

== Cherrypy ==

O Cherrypy é um outra ferramenta para programação Python para Web. Não muito conhecida pelos pythonicos, mas dependendo da necessidade poderá se tornar uma ótima solução.

=== Características ===

A principal característica do Cherrypy é que ele separa o código do layout HTML. Possuí um webserver embutido (que pode ser integrado ao Apache de diversas formas) e é altamente integrável com outros módulos Python (até mesmo o Cheetah). Ele funciona da seguinte maneira: ao invés de http://localhost/sub/index ser o arquivo index dentro do subdiretório sub; index() é uma função dentro da classe Sub. Piece of cake :-)

=== Código exemplo ===

{{{
CherryClass Root: 
mask: 
    def index(self, name="you"): 
        <html><body> 
            Hello, <b py-eval="name"></b> ! 
            <form py-attr="request.base" action="" method="get"> 
                Enter your name: <input name=name type=text><br> 
                <input type=submit value=OK> 
            </form> 
        </body></html>

}}}

=== Prós ===

   * Excelente documentação!
   * Muito pequeno, porém poderoso e estável, na versão 0.10 (Cherrypy 2 à caminho);
   * Possuí um webserver embutido, o que pode vir a calhar, dependendo da necessidade (para mim foi ótimo!);
   * Nativamente separa código e layout HTML;
   * Possuí diversos opcionais de configuração para desempenho(pool, thread, thread pool, etc) e integração com o Apache (CGI, Fast CGI, mod_rewrite, mod_proxy);
   * Todo o código é compilado, isto é, há um ganho de desempenho na execução (utilizando-se Psyco o ganho pode ser muito superior; mas ainda há algumas dúvidas quanto ao uso, uma vez que usuários notaram alguns picos no uso de memória em suas aplicações que, sem o Psyco, não acontecem);
   * Boa segurança;
   * Muito mais próximo ao Python que o Zope, por exemplo.

=== Contras ===

   * De acordo com o autor, ainda não foi testado em servidores com alta demanda de informações, portanto não se tem idéia de seu comportamento em stress extremo;
   * A linguagem de template do Cherry Py pode chegar a ser um pouco confusa, ao olhar de um web designer sem experiência em programação;
   * Em algumas listas de discussão, usuários comentam certas frustações (broken pipe causing cherrypy server shutdown, entre outros; não sei se é uma informação relevante);
   * Toda vez que mudar o código, deverá seguir a procissão: killar o processo do servidor (do cherrypy), recompilar o código e executar ... um verdadeiro pé no meio;

=== Segurança ===

A segurança do Cherrypy foi muito bem elaborada! O programador poderá se preocupar mais com funcionalidades do que com a segurança, uma vez que dificilmente um cracker/hacker/n00b/kiddie poderá detonar o seu servidor do jeito que se detona um PHP/ASP/JSP ou semelhante. Desculpem a falta de aprofundamento quanto ao quesito segurança, estou apenas citanto características muito superficialmente. Mas pelo que andei vendo sobre o Cherrypy, sua segurança é ótima, recomendado.

=== Cherrypy VS ... ===

   * [http://sourceforge.net/mailarchive/forum.php?thread_id=1990353&forum_id=9986 Zope].
   * [http://sourceforge.net/mailarchive/message.php?msg_id=5506255 Quixote].

=== Mais Informações ===

No [http://www.cherrypy.org/ website do Cherrypy], que contém ÓTIMA documentação.

== Quixote ==

O Quixote é uma framework web para Python, muito utilizada por alguns pythonicos mas não muito difundida no resto da comunidade.

=== Características ===

O Quixote também separa código do template, mas como não tive nenhuma experiência com o mesmo (apenas leituras), vou apenas citar poucas coisas. De acordo com a documentação, funciona através de CGI ou Fast CGI, mas deve funcionar com mod_rewrite, mod_proxy, etc.

=== Código exemplo ===

Exemplo de código:

{{{
from quixote import enable_ptl, Publisher

enable_ptl()
app = Publisher("quixote.demo")
app.setup_logs()
app.publish_cgi()

}}}

Exemplo de template:

{{{
template barebones_header(title=None, 
                          description=None): 
    """ 
    <html><head> 
    <title>%s</title> 
    """ % html_quote(str(title)) 
    if description: 
        '<meta name="description" content="%s">' % html_quote(description) 
    '</head><body bgcolor="#ffffff">' 

}}}

=== Prós ===

   * Veja só, ainda não encontrei nenhum.

=== Contras ===

   * Aos olhos de muitos usuários em listas de discussão, o Quixote tem uma curva de aprendizado muito alta, realmente difícil mesmo para programadores eficientes (tente imaginar web designers sem experiência com programação);
   * Encontrados problemas ao rodar em Windozes e etc;

=== Mais Informações ===

No [http://www.quixote.ca/ website do Quixote].

== Twisted Woven ==

O Twisted Woven é uma framework web para Python embutida no Twisted Matrix. Aparenta ser muito poderosa, porém descontinuada e ainda instável. O projeto passsou para mão de outra equipe. Passou a se chamar Nevow, e é mantido pelo [http://www.divmod.org Divmod].

=== Código exemplo ===

Template HTML:

{{{
  <html>
    <body>
      <h3 model="name" view="Text" />
      <div model="stuff" view="List">
        <span pattern="listItem" view="Text" />
      </div>
    </body>
  </html>

}}}

Modelo:

{{{
model = {
      'name': 'Welcome to Woven',
      'stuff': [
        'Foo',
        'Bar',
        'Baz'
      ]
    }

}}}

Ou o código completo:

{{{
from twisted.web.woven import page

model = {'name': 'Welcome to Woven', 
         'stuff': ['Foo', 'Bar', 'Baz']}
  
template = """<html>
  <body>
      <h3 model="name" view="Text" />
      <div model="stuff" view="List">
        <p pattern="listItem" view="Text" />
      </div>
    </body>
  </html>
"""   

resource = page.Page(model, template=template)

}}}

=== Mais informações ===

No website do [http://twistedmatrix.com/documents/current/howto/woven Woven]. Curiosidade: acredite se quiser, mas pelo que li sobre o [http://www.twistedmatrix.com Twisted Matrix], é que o seu website roda em uma SDSL de 768 Kbps, por isso um tanto lento :-) .

== Divmod Nevow ==

Ah, uma boa pedida. O Nevow é a ferramenta perfeita para integrar trabalhos em equipe, separando o webdesigner do programador. Como deu para notar, o Nevow vem do Woven, por isso a semelhança nos nomes (um é o exato contrário do outro).

=== Características ===

A principal caracterísitas do Nevow é sua capacidade de dividir o código e o layout HTML, uma vez que os templates do Nevow são extremamente amigáveis, sendo a curva de aprendizado para webdesigners sem experiência com programação minima. O método como funciona é muito parecido com o Cherrypy, subdividido em classes e funções, ao invés de arquivos e subdiretórios (assim como o Woven, etc).

=== Código exemplo ===

[http://nevow.com/Nevow2004Examples.zip Pacote fechado!] ;-)

=== Prós ===

   * É a melhor framework web para trabalhos em equipe;
   * Dentre todos os citados, este é o paraíso para webdesigners;
   * Depende do Twisted para funcionar (do lado bom, é uma ferramenta poderosíssima para trabalhar com networking, portanto, já está lá!);
   * Já falei antes? Aqui vai denovo: curva de aprendizado quase nula!;

=== Contras ===

   * Documentação? Acho que o Divmod esqueceu disto ... pelo menos tem lista de discussão;
   * Depende do Twisted para funcionar (do lado ruim, depender de algo é este lado!);
   * Aparenta ainda ser um pouco instável, o caso é testar.

=== Segurança ===

Funciona exatamente como o Woven, portanto, possui um esquema semelhante ao Cherrypy. Sendo assim, recomendadíssimo! :-)

=== Para Rever ===

Se o Nevow funcionar da mesma maneira do Cherrypy, tanto na integração com o Apache quanto em boa parte dos opcionais, com certeza será algo para ser usado. (Desculpem a falta de informação, acabei descobrindo o Nevow e o Woven ontem durante a noite!).

=== Mais Informações ===

No [http://www.divmod.org/Home/Projects/Nevow/index.html website do Nevow].

== Spyce ==

Bom, o spyce é outra ferramenta para criação de PSP (Python Server Pages). É muito parecido com o Webware, misturando código com layout e tudo mais, através de tags [[ e ]]. Pelo menos parece ser fácil, novamente como o Webware.

=== Características ===

Novamente: parecido com o webware. Não posso citar mais características porque não tenho experiência com o Spyce.

=== Código exemplo ===

{{{
<html><body>
  Hello [[print 'world!',]]
  [[ for i in range(10): { ]]
    [[=i]]
  [[ } ]]
</body></html>

}}}

=== Prós ===

   * Curva de aprendizado baixa;
   * Oh, há documentação! :-)

=== Contras ===

   * Segurança depende do Apache, depende do programador, e assim vai;
   * Faz a lambança de misturar programação com layout, tornando o desenvolvimento em equipe provavelmente um pesadelo.

=== Mais informações ===

No [http://spyce.sourceforge.net/ website do Spyce].

== mod_python ==

O Mod_python é um módulo para integração do Python com o servidor Apache (e somente o Apache). Ele é um programa de extremo baixo nível para lidar com o HTTP e o Apache - o que significa que o programador tem a opção de lidar com várias das sutilezas do protocolo HTTP e implementar tratadores em python para cada uma delas.

Possivelmente é a ferramenta mais indicada a se usar quando se for fazer um sistema baseado em WEB (em oposição a um simples "SITE") possibilitando o desenvolvimento de formas inovadoras de interagir com o servidor e com o HTTP.

Em suas versões mais recentes, para o Apache 2, há também uma versão de Python Server Pages (PSP) que possibilita o uso de Tags do tipo <% e %> para misturar código Python com HTML. No entanto o uso de PSPs é opcional, e em grande parte dos casos elas são usadas apenas como templates (ou seja, justamente para separar o HTML do código).

Tem uma documentação razoável, mas a curva de aprendizado é bem inclinada.

=== Prós ===
   * Permite acesso de baixo nível ao protocolo HTTP e ao servidor Apache.
   * Tem uma flexibilidade maior para desenvolvimento de aplicações que requeiram grande interação com a Web
   * Otimizado para ser rápido e eficiente.

=== Contras ===
   * Razoavelmente complexo para aprender.
   * A segurança fica completamente por conta de cada programa feito.
   * Não há nada "pronto" - não tem modelos de site prontos rpa funcionar bastando preencher as lacunas, ou coisa parecida. Ou se parte de uma aplicação já escrita usando Mod Python, ou se parte do zero.
=== Mais Informações ===

No [http://www.modpython.org/ site do mod_python].

== Python Servlet Engine ==

O Python Servlet Engine (PSE) é um framework para o desenvolvimento rápido de aplicações Web. É escrito em Python e utiliza o mod_python rodando sobre o servidor Apache.Compila os templates para byte code Python produzindo páginas web que executam muito rápido.

Cada servlet tem dois componentes: o template e o módulo de código Python. Esta arquitetura permite a separação da apresentação e da implementação, de forma que o webdesigner e o programador possam trabalhar de maneira independente. Também pode ser codificado no estilo normalmente usado pelos programadores PHP.

Provavelmente é a ferramenta mais indicada a se usar quando se for fazer um sistema baseado em WEB.

A seguir são exibidos dois trechos de código escritos em PHP e Python que realizam a mesma função. Este exemplo foi do artigo "User-Friendly Form Validation with PHP and CSS" de Jeff Cogswell, publicado no ONLamp.com em 22/04/2004. Algumas alterações foram feitas para corrigir alguns erros constantes do original. Os dois trechos foram codificados no mesmo estilo, não tendo sido utilizado o modelo PSE que permite a separação dos códigos Python e HTML.

=== Código exemplo PHP ===
{{{
<!-- From "User-Friendly Form Validation with PHP and CSS" at
     http://www.onlamp.com/pub/a/php/2004/04/22/php_css_forms.html -->

<?
    $message    = "";
    $emailclass = "basictext";
    $username   = "";

    if ($_POST['process'] == 1) {

        $pattern = '/.*@.*\..*/';
        $email   = $_POST['email'];
        $urlname = urlencode($$_POST['username']);

        if (preg_match($pattern, $_POST['email']) > 0) {
            // Here's where you would store
            // the data in a database...
            header(
              "location: thankyou.php?&username=$urlname");
        }
        $message    = "Please enter a valid email address.";
        $username   = $_POST['name'];
        $emailclass = "errortext";
    }
?>

<html>
<style>
    .basictext {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 14px; color:#000066;
    }
    .errortext {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 14px; color:#C00000; font-weight: bold;
    }
</style>
<body>
<form action="email.php" method="post">
    <? if ($message != "") {
        print '<span class="errortext">'.
            $message."<span><br>\n";
    }
    ?>
    <span class="<?print $emailclass; ?>">
        Email address:</span>
    <input name="email" type="text"
        class="<? print $emailclass; ?>"><br>

    <span class="basictext">Your name:</span>
    <input name="name" type="text" class="basictext"
        value="<?print $username; ?>"><br>
    <input type="hidden" name="process" value="1">
    <input type="submit" name="Button1" value="Sign up!">
</form>
</body></html>
}}}

=== Código exemplo Python ===
{{{
<!-- From "User-Friendly Form Validation with PHP and CSS" at
     http://www.onlamp.com/pub/a/php/2004/04/22/php_css_forms.html -->

<!-- This is a re-implementation using Python and PSE for comparison. -->

<?
import re, urllib

message    = ""
emailclass = "basictext"
username   = ""

if pse.form.has_key('process'):

    pattern = r'.*@.*\..*'
    email   = pse.form['email']
    urlname = urllib.quote(pse.form['name'])

    if re.match(pattern, email):
        # Here's where you would store
        # the data in a database...
        pse.plugins.response.redirect('thankyou.pt?&username=%s' % urlname)

    message    = "Please enter a valid email address."
    username   = pse.form['name']
    emailclass = "errortext"
?>

<html>
<style>
    .basictext {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 14px; color:#000066;
    }
    .errortext {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 14px; color:#C00000; font-weight: bold;
    }
</style>
<body>
<form action="email.pt" method="post">
    <? if message != "":
           print '<span class="errortext">%s<span><br>' % message
    ?>
    <span class="=emailclass">
        Email address:</span>
    <input name="email" type="text"
        class="=emailclass"><br>

    <span class="basictext">Your name:</span>
    <input name="name" type="text" class="basictext"
        value="=username"><br>
    <input type="hidden" name="process" value="1">
    <input type="submit" name="Button1" value="Sign up!">
</form>
</body></html>
}}}

=== Prós ===
   * A execução de byte codes Python compilados aumenta muito o desempenho das aplicações, além de prover segurança ao desenvolvedor por ocultar os fontes em Python;
   * Simples e poderoso: alia a facilidade inerente ao Python à potência do mod_python;
   * Separa a Apresentação/Interface(HTML) e a Lógica (Python), coerente com o incentivado no modelo MVC, permitindo também que o programador codifique no estilo tradicional do PHP, se desejar;
   * API rica para o desenvimento de aplicações Web;
   * Permite a criação de Tags customizadas, extendendo as  funcionalidades dos templates (usuários avançados);
   * Permite a extensão de funcionalidades pela criação de plugins em Python (usuários avançados);
   * Permite a criação de módulos que manipulam pedidos de autorização e autenticação do browser;
   * Relatórios de erros customizáveis e amigáveis;
   * Usuários de PHP podem fazer a transição para Python de forma muito mais rápida e fácil do que usando o mod_python e outras ferramentas de template;
   * O colaborador que contribuiu com a análise deste framework testou sumariamente todas as ferramentas citadas neste artigo e, em sua humilde opinião, considerou este o que mais se harmoniza com a filosofia de desenvolvimento do Python, aliando simplicidade, potência, código conciso e claro, bem como por permitir rápida produtividade em curto prazo. Parece que o Zope é mais poderoso, mas também muito mais complexo.

=== Contras ===
   * Menos difundido que outras ferramentas e portanto pode ter sido menos submetido a testes.

=== Mais Informações ===
[http://nick.borko.org/pse].
( Análise do PSE: contribuição de Rômulo Campelo - romulocampelo no gmail )

== Zope ==

Não sou especialista em Zope, e não tenho muita opinião sobre a não ser que não serviu para o que eu queria :-). Mas há bons sites e documentação espalhados por aí:

   * [http://www.pythonbrasil.com.br/moin.cgi/ZopeKitDeConstru_e7_e3oDeAplica_e7_f5esWeb ZopeKitDeConstruçãoDeAplicaçõesWeb], aqui mesmo no Python Brasil;
   * [http://www.pythonbrasil.com.br/moin.cgi/ZopeWebApplicattionDevelopmentAndContentManagement ZopeWebApplicattionDevelopmentAndContentManagement] também aqui no Python Brasil;
   * [http://www.tchezope.org TchêZope].
   * [http://fabiorizzo.objectis.net/artigos], contém alguns artigos sobre Instalação e criação de páginas no Zope - FabioRizzo

== Skunkweb ==

Parece ser muito bom, mas não tenho muitas informações sobre. Vou estudar ele com carinho :-)

=== Prós ===

   * Aparenta ser poderoso. Muitos opcionais ... é questão de estudar mais um pouco.

=== Contras ===

   * Só funciona no Windoze da vida com cygwin.

=== Mais informações ===

No site do [http://www.skunkweb.org/ SkunkWEB], aparentemente o site mais cheiroso da web. :-)

== Crusader ==

Funciona no estilo Python Server Pages. Mais informações no site do [http://www.movatis.com/crusader/ Crusader].

== Albatross ==

Apenas algum exemplo de código ...

=== Exemplos de código ===

==== cgi-bin/simple.html ====

{{{
<html>
<head>
<title>My CGI application</title>
</head>
<body>
Hello from my second simple CGI application!
</body>
</html> 

}}}

==== cgi-bin/simple.py ====

{{{
#!/usr/bin/python

from albatross import SimpleContext

ctx = SimpleContext('.')
templ = ctx.load_template('simple.html')
templ.to_html(ctx)
print 'Content-Type: text/html'
print
ctx.flush_content() 

}}}

=== Mais informações ===

[http://www.object-craft.com.au/projects/albatross/ Albatross].

== O que usar? ==

Na minha reles opinião:

   * Fácil: Webware ou Spyce;
   * Poderoso, com estrutura para trabalhos em equipe: Nevow;
   * Super-power: Cherrypy (ver contras!).

== Links para outras comparações ==

Complementando esta comparação de frameworks, existem diversos outros recursos disponíveis na Web, entre eles:

   * [http://www.python.org/cgi-bin/moinmoin/WebProgramming Web Programming]
   * [http://www.colorstudy.com/docs/shootout.html The Web Framework Shootout]
   * [http://www.boddie.org.uk/python/web_frameworks.html Python Web Frameworks Overview]

== Outras informações ==

Existem diversas outras ferramentas para auxiliar no desenvolvimento de aplicações avançadas para web, tais como:

   * [http://www.ailab.si/orange Orange]: excelente ferramenta de data mining com ótima documentação;
   * Alguns projetos do [http://www.divmod.org Divmod] são ótimos, é questão de dar uma olhada;
   * [http://www.jython.org Jython]! Para aqueles que amam Python, mas não abrem mão do Tomcat ;-) 



== Alguns Links Interessantes ==

Existem muitos artigos e tutoriais de assuntos específicos citados aqui, portanto, aqui vão alguns:

   * HospedagemPython, para uma lista de hospedeiros web que suportam Python
   * WebwareRapidinho, um tutorial sobre o webware;
   * IntroduçãoJython, IntroduçãoJythonDidática e ["Jython"], todos com algumas informações sobre o Jython;
   * Os citados sobre Zope;
   * HelpOnInstalling/TwistedWeb;

== Considerações finais ==

Este artigo foi apenas o meu ponto de vista sobre este assunto. Se alguém tiver alguma dúvida, favor entrar em contato pelo rkuesters (arroba) gmail (ponto) com. Por favor, qualquer erro técnico, falta de informações, etc e tal; modifiquem! :-) Obrigado!

Atenciosamente,
Richard Kuesters.


Notas sobre o mod Python adicionadas por:
João S. O. Bueno Calligaris

Correções do Webware por:
Michel Thadeu

Notificação de erros no Webware por RudaMoura
