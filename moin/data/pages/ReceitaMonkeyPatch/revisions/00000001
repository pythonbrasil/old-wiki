= Receita: Monkeypatching  =

Dica do próprio GuidoVanRossum para simplificar a tecnica do "Monkey Patch" (adicionar metodos numa classe já definida).
Fonte: http://mail.python.org/pipermail/python-dev/2008-January/076194.html

== Código ==
Primeiro, um decorator para adicionar um unico metodo a uma classe:
{{{
#!python
def monkeypatch_method(cls):
    def decorator(func):
        setattr(cls, func.__name__, func)
        return func
    return decorator
}}}

Segundo, uma "metaclasse" (ok, uma factory function que serve como metaclasse) para adicionar metodos (outros atributos) para uma classe pre-existente, com uma conveniente definição de classe
{{{
def monkeypatch_class(name, bases, namespace):
    assert len(bases) == 1, "Exactly one base class required"
    base = bases[0]
    for name, value in namespace.iteritems():
        if name != "__metaclass__":
            setattr(base, name, value)
    return base
}}}

== Exemplo de uso ==

Decorator:
{{{
#!python
from <somewhere> import <someclass>

@monkeypatch_method(<someclass>)
def <newmethod>(self, args):
    return <whatever>

}}}
Isso vai adicionar <newmethod> a <someclass>.


Metaclass:
{{{
#!python
from <somewhere> import <someclass>

class <newclass>(<someclass>):
    __metaclass__ = monkeypatch_class
    def <method1>(...): ...
    def <method2>(...): ...
    ...
}}}
Isso vai adicionar <method1> e <method2> a <someclass>, e criar <newclass> como um "apelido" para <someclass>.


Volta para CookBook.

----

Nome do autor da Receita
